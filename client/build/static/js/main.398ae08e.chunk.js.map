{"version":3,"sources":["components/Home/Header.js","components/Home/Cards.js","components/Home/Main.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Container","to","Brand","Nav","className","Link","Cards","shrinkedUrl","InputGroup","Text","Button","onClick","navigator","clipboard","writeText","window","open","src","style","paddingLeft","paddingBottom","width","height","alt","React","memo","Main","useState","url","setUrl","shortUrl","setShortUrl","Form","onSubmit","e","preventDefault","axios","post","original","then","response","data","catch","error","console","log","Control","value","onChange","target","type","placeholder","required","About","Card","Body","Title","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.398ae08e.chunk.js","sourcesContent":["import React from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\n\nfunction Header() {\n    return (\n        <Navbar bg='primary' variant='dark'>\n            <Container>\n\n                <LinkContainer to='/'>\n                    <Navbar.Brand>Url Shortener</Navbar.Brand>\n                </LinkContainer>\n\n                <Nav className='me-auto'>\n\n                    <LinkContainer to='/'>\n                        <Nav.Link>Home</Nav.Link>\n                    </LinkContainer>\n\n                    {/* <LinkContainer to='/links'>\n                        <Nav.Link>Links</Nav.Link>\n                    </LinkContainer> */}\n\n                    <LinkContainer to='/about'>\n                        <Nav.Link>About</Nav.Link>\n                    </LinkContainer>\n                    \n                </Nav>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\n\nfunction Cards({ shrinkedUrl }) {\n\n    const style = {\n        paddingLeft: 2,\n        paddingBottom: 2,\n        width: 17,\n        height: 16\n    }\n\n    const clickHandler = () => {\n        navigator.clipboard.writeText(shrinkedUrl)\n    }\n\n    return (\n        <InputGroup className='mt-4 d-flex justify-content-center'>\n\n            <InputGroup.Text>Shortened Url </InputGroup.Text>\n            <InputGroup.Text>{shrinkedUrl}</InputGroup.Text>\n            <Button onClick={clickHandler}>copy</Button>\n            <Button onClick={() => window.open(`${shrinkedUrl}`, '_blank')}\n                variant='info'>\n                <img src='https://img.icons8.com/fluency-systems-regular/50/000000/external-link.png' style={style} alt='icon-r' />\n            </Button>\n\n        </InputGroup>\n    )\n}\n\nexport default React.memo(Cards)\n","import React, { useState } from 'react'\nimport axios from 'axios'\nimport Cards from './Cards'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nfunction Main() {\n\n    const [url, setUrl] = useState('')\n    const [shortUrl, setShortUrl] = useState('')\n    \n    const submitHandler = (e) => {\n        e.preventDefault()\n        \n        axios.post(`https://urlshortener-self.vercel.app/shrink`, {\n            original: url\n        })\n            .then((response) => {\n                setUrl('')\n                setShortUrl(response.data.url)\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className='container'>\n\n            <Form onSubmit={submitHandler}>\n\n                <Form.Control\n                    className='mt-3 text-center'\n                    value={url}\n                    onChange={e => setUrl(e.target.value)}\n                    type='text'\n                    placeholder='your url with http(s)://'\n                    required\n                />\n\n                <div className='d-flex justify-content-center'>\n                    <Button className='mt-3' variant='primary' type='submit'>\n                        Shrink\n                    </Button>\n                </div>\n            </Form>\n\n            {shortUrl && <Cards shrinkedUrl={shortUrl} />}\n        </div>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nfunction About() {\n\n    const style = {\n        paddingLeft: 3,\n        width: 20,\n        height: 16\n    }\n\n    return (\n        <div className='container mt-3'>\n\n            <Card bg='light'>\n                <Card.Header>&copy; Raj Khare</Card.Header>\n\n                <Card.Body>\n                    <Card.Title>Url Shortener</Card.Title>\n\n                    <Card.Text>\n                        This project is made with ðŸ’™ using PERN Stack\n                    </Card.Text>\n\n                    <Button variant='danger'\n                        onClick={() => window.open('https://github.com/rajkhare05/urlshortener', '_blank')}>\n                        Contribute\n                        <img src='https://img.icons8.com/fluency-systems-regular/50/000000/external-link.png' style={style} alt='icon-r' />\n                    </Button>\n                    \n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default About\n","import React from 'react';\nimport Header from './components/Home/Header';\nimport Main from './components/Home/Main'\n// import LinkBoard from './components/LinkBoard'\nimport About from './components/About'\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path='/' component={Main} />\n        {/* <Route path='/links' component={LinkBoard} /> */}\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}